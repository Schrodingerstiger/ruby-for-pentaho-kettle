<?xml version="1.0" encoding="UTF-8"?>
<transformation>
  <info>
    <name>Scripting JDBC</name>
    <description/>
    <extended_description/>
    <trans_version/>
    <trans_type>Normal</trans_type>
    <trans_status>0</trans_status>
    <directory>&#47;</directory>
    <parameters>
    </parameters>
    <log>
<trans-log-table><connection/>
<schema/>
<table/>
<size_limit_lines/>
<interval/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>CHANNEL_ID</id><enabled>Y</enabled><name>CHANNEL_ID</name></field><field><id>TRANSNAME</id><enabled>Y</enabled><name>TRANSNAME</name></field><field><id>STATUS</id><enabled>Y</enabled><name>STATUS</name></field><field><id>LINES_READ</id><enabled>Y</enabled><name>LINES_READ</name><subject/></field><field><id>LINES_WRITTEN</id><enabled>Y</enabled><name>LINES_WRITTEN</name><subject/></field><field><id>LINES_UPDATED</id><enabled>Y</enabled><name>LINES_UPDATED</name><subject/></field><field><id>LINES_INPUT</id><enabled>Y</enabled><name>LINES_INPUT</name><subject/></field><field><id>LINES_OUTPUT</id><enabled>Y</enabled><name>LINES_OUTPUT</name><subject/></field><field><id>LINES_REJECTED</id><enabled>Y</enabled><name>LINES_REJECTED</name><subject/></field><field><id>ERRORS</id><enabled>Y</enabled><name>ERRORS</name></field><field><id>STARTDATE</id><enabled>Y</enabled><name>STARTDATE</name></field><field><id>ENDDATE</id><enabled>Y</enabled><name>ENDDATE</name></field><field><id>LOGDATE</id><enabled>Y</enabled><name>LOGDATE</name></field><field><id>DEPDATE</id><enabled>Y</enabled><name>DEPDATE</name></field><field><id>REPLAYDATE</id><enabled>Y</enabled><name>REPLAYDATE</name></field><field><id>LOG_FIELD</id><enabled>Y</enabled><name>LOG_FIELD</name></field></trans-log-table>
<perf-log-table><connection/>
<schema/>
<table/>
<interval/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>SEQ_NR</id><enabled>Y</enabled><name>SEQ_NR</name></field><field><id>LOGDATE</id><enabled>Y</enabled><name>LOGDATE</name></field><field><id>TRANSNAME</id><enabled>Y</enabled><name>TRANSNAME</name></field><field><id>STEPNAME</id><enabled>Y</enabled><name>STEPNAME</name></field><field><id>STEP_COPY</id><enabled>Y</enabled><name>STEP_COPY</name></field><field><id>LINES_READ</id><enabled>Y</enabled><name>LINES_READ</name></field><field><id>LINES_WRITTEN</id><enabled>Y</enabled><name>LINES_WRITTEN</name></field><field><id>LINES_UPDATED</id><enabled>Y</enabled><name>LINES_UPDATED</name></field><field><id>LINES_INPUT</id><enabled>Y</enabled><name>LINES_INPUT</name></field><field><id>LINES_OUTPUT</id><enabled>Y</enabled><name>LINES_OUTPUT</name></field><field><id>LINES_REJECTED</id><enabled>Y</enabled><name>LINES_REJECTED</name></field><field><id>ERRORS</id><enabled>Y</enabled><name>ERRORS</name></field><field><id>INPUT_BUFFER_ROWS</id><enabled>Y</enabled><name>INPUT_BUFFER_ROWS</name></field><field><id>OUTPUT_BUFFER_ROWS</id><enabled>Y</enabled><name>OUTPUT_BUFFER_ROWS</name></field></perf-log-table>
<channel-log-table><connection/>
<schema/>
<table/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>CHANNEL_ID</id><enabled>Y</enabled><name>CHANNEL_ID</name></field><field><id>LOG_DATE</id><enabled>Y</enabled><name>LOG_DATE</name></field><field><id>LOGGING_OBJECT_TYPE</id><enabled>Y</enabled><name>LOGGING_OBJECT_TYPE</name></field><field><id>OBJECT_NAME</id><enabled>Y</enabled><name>OBJECT_NAME</name></field><field><id>OBJECT_COPY</id><enabled>Y</enabled><name>OBJECT_COPY</name></field><field><id>REPOSITORY_DIRECTORY</id><enabled>Y</enabled><name>REPOSITORY_DIRECTORY</name></field><field><id>FILENAME</id><enabled>Y</enabled><name>FILENAME</name></field><field><id>OBJECT_ID</id><enabled>Y</enabled><name>OBJECT_ID</name></field><field><id>OBJECT_REVISION</id><enabled>Y</enabled><name>OBJECT_REVISION</name></field><field><id>PARENT_CHANNEL_ID</id><enabled>Y</enabled><name>PARENT_CHANNEL_ID</name></field><field><id>ROOT_CHANNEL_ID</id><enabled>Y</enabled><name>ROOT_CHANNEL_ID</name></field></channel-log-table>
<step-log-table><connection/>
<schema/>
<table/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>CHANNEL_ID</id><enabled>Y</enabled><name>CHANNEL_ID</name></field><field><id>LOG_DATE</id><enabled>Y</enabled><name>LOG_DATE</name></field><field><id>TRANSNAME</id><enabled>Y</enabled><name>TRANSNAME</name></field><field><id>STEPNAME</id><enabled>Y</enabled><name>STEPNAME</name></field><field><id>STEP_COPY</id><enabled>Y</enabled><name>STEP_COPY</name></field><field><id>LINES_READ</id><enabled>Y</enabled><name>LINES_READ</name></field><field><id>LINES_WRITTEN</id><enabled>Y</enabled><name>LINES_WRITTEN</name></field><field><id>LINES_UPDATED</id><enabled>Y</enabled><name>LINES_UPDATED</name></field><field><id>LINES_INPUT</id><enabled>Y</enabled><name>LINES_INPUT</name></field><field><id>LINES_OUTPUT</id><enabled>Y</enabled><name>LINES_OUTPUT</name></field><field><id>LINES_REJECTED</id><enabled>Y</enabled><name>LINES_REJECTED</name></field><field><id>ERRORS</id><enabled>Y</enabled><name>ERRORS</name></field><field><id>LOG_FIELD</id><enabled>N</enabled><name>LOG_FIELD</name></field></step-log-table>
    </log>
    <maxdate>
      <connection/>
      <table/>
      <field/>
      <offset>0.0</offset>
      <maxdiff>0.0</maxdiff>
    </maxdate>
    <size_rowset>10000</size_rowset>
    <sleep_time_empty>50</sleep_time_empty>
    <sleep_time_full>50</sleep_time_full>
    <unique_connections>N</unique_connections>
    <feedback_shown>Y</feedback_shown>
    <feedback_size>50000</feedback_size>
    <using_thread_priorities>Y</using_thread_priorities>
    <shared_objects_file/>
    <capture_step_performance>N</capture_step_performance>
    <step_performance_capturing_delay>1000</step_performance_capturing_delay>
    <step_performance_capturing_size_limit>100</step_performance_capturing_size_limit>
    <dependencies>
    </dependencies>
    <partitionschemas>
    </partitionschemas>
    <slaveservers>
    </slaveservers>
    <clusterschemas>
    </clusterschemas>
  <created_user>-</created_user>
  <created_date>2011&#47;02&#47;13 21:45:25.023</created_date>
  <modified_user>-</modified_user>
  <modified_date>2011&#47;02&#47;13 21:45:25.023</modified_date>
  </info>
  <notepads>
  </notepads>
  <connection>
    <name>TestDB</name>
    <server/>
    <type>H2</type>
    <access>Native</access>
    <database>mem:MyDatabase;DB_CLOSE_DELAY=-1;MULTI_THREADED=0</database>
    <port>8082</port>
    <username>H2</username>
    <password>Encrypted </password>
    <servername/>
    <data_tablespace/>
    <index_tablespace/>
    <attributes>
      <attribute><code>FORCE_IDENTIFIERS_TO_LOWERCASE</code><attribute>N</attribute></attribute>
      <attribute><code>FORCE_IDENTIFIERS_TO_UPPERCASE</code><attribute>N</attribute></attribute>
      <attribute><code>IS_CLUSTERED</code><attribute>N</attribute></attribute>
      <attribute><code>PORT_NUMBER</code><attribute>8082</attribute></attribute>
      <attribute><code>QUOTE_ALL_FIELDS</code><attribute>N</attribute></attribute>
      <attribute><code>SUPPORTS_BOOLEAN_DATA_TYPE</code><attribute>N</attribute></attribute>
      <attribute><code>USE_POOLING</code><attribute>N</attribute></attribute>
    </attributes>
  </connection>
  <order>
  <hop> <from>Read Critters from in-memory H2 DB</from><to>output critters</to><enabled>Y</enabled> </hop>  <hop> <from>Read function info about in-memory H2 DB</from><to>output function info</to><enabled>Y</enabled> </hop>  <hop> <from>Read supported data types from in-memory H2 DB</from><to>output datatype info</to><enabled>Y</enabled> </hop>  </order>
  <step>
    <name>Put Critters Into in-memory H2 DB</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
    <connection>TestDB</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>N</single_statement>
    <replace_variables>N</replace_variables>
    <sql>--
-- Note:
-- This step executes first, before the rest of the transformation starts. 
-- It populates the H2 in-memory DB with some critters.

DROP TABLE IF EXISTS critters;

CREATE TABLE critters(
	ID INT PRIMARY KEY,
	CRITTER VARCHAR(100)
);

INSERT INTO critters VALUES (1,&apos;cat&apos;);
INSERT INTO critters VALUES (2,&apos;dog&apos;);
INSERT INTO critters VALUES (3, &apos;ant&apos;);
INSERT INTO critters VALUES (4, &apos;badger&apos;);
INSERT INTO critters VALUES (5, &apos;bee&apos;);
INSERT INTO critters VALUES (6, &apos;camel&apos;);
INSERT INTO critters VALUES (7, &apos;chicken&apos;);
INSERT INTO critters VALUES (8, &apos;crow&apos;);
INSERT INTO critters VALUES (9, &apos;deer&apos;);
INSERT INTO critters VALUES (10, &apos;eagle&apos;);
INSERT INTO critters VALUES (11, &apos;falcon&apos;);
INSERT INTO critters VALUES (12, &apos;panda&apos;);</sql>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>178</xloc>
      <yloc>56</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>Read Critters from in-memory H2 DB</name>
    <type>TypeExitRubyStep</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
	<scripts>
		<script>
			<title>Ruby Script</title>
			<body>###############################################################################
# Ruby Scripting Step for Kettle 
# Created by Slawomir Chodnicki 
# http:&#47;&#47;type-exit.org
################################################################################
# This scripts creates a table &quot;critters&quot; that has been populated by the
# Execute SQL step. 
#
# All critters are read from the database and put to the row stream.
#
# This script fetches the connect URL from the Database definition and 
# connects using JDBC
################################################################################

# initialize driver class, this is much like calling Class.forName(driver)
Java::org.h2.Driver

# get the url from the database definition in the db connections dialog
url = $trans.trans_meta.find_database(&quot;TestDB&quot;).url

# get a connection
conn = java.sql.DriverManager.get_connection(url, &quot;H2&quot;, &quot;&quot;)

# execute the select statement
result = conn.create_statement.execute_query &apos;SELECT ID, CRITTER FROM critters ORDER BY CRITTER&apos;

# write result rows to the output stream
while result.next do
	$output &lt;&lt; {	
		&quot;id&quot; 		=&gt; result.getLong(1),
		&quot;critter&quot; 	=&gt; result.getString(2)
	}	
end

# close the db connection
result.close
conn.close
</body>
			<role>ROW_SCRIPT</role>
		</script>
	</scripts>
	<rubyVersion>RUBY_1_8</rubyVersion>
	<clearInputFields>N</clearInputFields>

	<outputFields>
		<outputField>
			<name>id</name>
			<type>5</type>
			<update>N</update>
		</outputField>
		<outputField>
			<name>critter</name>
			<type>2</type>
			<update>N</update>
		</outputField>
	</outputFields>
	<rubyVariables>
	</rubyVariables>
	<infoSteps>
	</infoSteps>
	<targetSteps>
	</targetSteps>
	<gemHome/>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>176</xloc>
      <yloc>154</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>Read function info about in-memory H2 DB</name>
    <type>TypeExitRubyStep</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
	<scripts>
		<script>
			<title>Ruby Script</title>
			<body>###############################################################################
# Ruby Scripting Step for Kettle 
# Created by Slawomir Chodnicki 
# http:&#47;&#47;type-exit.org
################################################################################
# This scripts gets information about available functions on the H2 in-memory DB 
# directly from JDBC
################################################################################

# initialize driver class, this is much like calling Class.forName(driver)
Java::org.h2.Driver

# get the url from the database definition in the db connections dialog
url = $trans.trans_meta.find_database(&quot;TestDB&quot;).url

# get a connection and DB meta data
conn = java.sql.DriverManager.get_connection(url, &quot;H2&quot;, &quot;&quot;)
meta_data = conn.meta_data

# include the helper script tab
$tabs[&quot;helper&quot;].require()

# write available functions to stream
write_functions &quot;numeric&quot;, meta_data.numeric_functions
write_functions &quot;string&quot;, meta_data.string_functions
write_functions &quot;system&quot;, meta_data.system_functions
write_functions &quot;time_date&quot;, meta_data.time_date_functions

# close the db connection
conn.close
</body>
			<role>ROW_SCRIPT</role>
		</script>
		<script>
			<title>helper</title>
			<body>###############################################################################
# Ruby Scripting Step for Kettle 
# Created by Slawomir Chodnicki 
# http:&#47;&#47;type-exit.org
################################################################################
# This is a helper method that writes an comma separated string of functions 
# to the output stream along with a given group
################################################################################

def write_functions group, functions

	functions.split(&quot;,&quot;).each do |f|

	$output &lt;&lt; {
		&quot;function_group&quot; =&gt; group,
		&quot;function_name&quot; =&gt; f
	}

	end

end</body>
			<role>LIB_SCRIPT</role>
		</script>
	</scripts>
	<rubyVersion>RUBY_1_8</rubyVersion>
	<clearInputFields>N</clearInputFields>

	<outputFields>
		<outputField>
			<name>function_group</name>
			<type>2</type>
			<update>N</update>
		</outputField>
		<outputField>
			<name>function_name</name>
			<type>2</type>
			<update>N</update>
		</outputField>
	</outputFields>
	<rubyVariables>
	</rubyVariables>
	<infoSteps>
	</infoSteps>
	<targetSteps>
	</targetSteps>
	<gemHome/>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>178</xloc>
      <yloc>267</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>Read supported data types from in-memory H2 DB</name>
    <type>TypeExitRubyStep</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
	<scripts>
		<script>
			<title>Ruby Script</title>
			<body>#################################################################################
# Ruby Scripting Step for Kettle 
# Created by Slawomir Chodnicki 
# http:&#47;&#47;type-exit.org
#################################################################################
# This scripts gets information about available data types on the H2 in-memory DB 
# directly from JDBC
#################################################################################

# initialize driver class, this is much like calling Class.forName(driver)
Java::org.h2.Driver

# get the url from the database definition in the db connections dialog
url = $trans.trans_meta.find_database(&quot;TestDB&quot;).url

# get a connection and DB type info resultset
conn = java.sql.DriverManager.get_connection(url, &quot;H2&quot;, &quot;&quot;)
rs = conn.meta_data.type_info

# include the helper script tab
$tabs[&quot;helper&quot;].require()

while rs.next do
	$output &lt;&lt; {
		&quot;TYPE_NAME&quot; 		=&gt; rs.getString(&quot;TYPE_NAME&quot;),
		&quot;PRECISION&quot; 		=&gt; rs.getLong(&quot;PRECISION&quot;),
		&quot;LITERAL_PREFIX&quot; 	=&gt; rs.getString(&quot;LITERAL_PREFIX&quot;),
		&quot;LITERAL_SUFFIX&quot; 	=&gt; rs.getString(&quot;LITERAL_SUFFIX&quot;),
		&quot;CREATE_PARAMS&quot; 	=&gt; rs.getString(&quot;CREATE_PARAMS&quot;),
		&quot;NULLABLE&quot; 			=&gt; nullable?(rs.getShort(&quot;NULLABLE&quot;)),
		&quot;CASE_SENSITIVE&quot; 	=&gt; rs.getBoolean(&quot;CASE_SENSITIVE&quot;),
		&quot;SEARCHABLE&quot; 		=&gt; searchable?(rs.getShort(&quot;SEARCHABLE&quot;)),
		&quot;IS_UNSIGNED&quot;		=&gt; rs.getBoolean(&quot;UNSIGNED_ATTRIBUTE&quot;),
		&quot;AUTO_INCREMENT&quot;	=&gt; rs.getBoolean(&quot;AUTO_INCREMENT&quot;)
	}
end

# close the db connection
rs.close
conn.close
</body>
			<role>ROW_SCRIPT</role>
		</script>
		<script>
			<title>helper</title>
			<body>###############################################################################
# Ruby Scripting Step for Kettle 
# Created by Slawomir Chodnicki 
# http:&#47;&#47;type-exit.org
################################################################################
# This is a helper method for interpreting DatabaseMetatData output
################################################################################
java_import java.sql.DatabaseMetaData

def nullable? intval
	
	{
		DatabaseMetaData.typeNullable =&gt; true,
		DatabaseMetaData.typeNoNulls =&gt; false
	}[intval]

end

def searchable? intval
	
	{
		DatabaseMetaData.typePredNone 		=&gt; &quot;NO&quot;,
		DatabaseMetaData.typePredChar 		=&gt; &quot;ONLY WHERE .. LIKE&quot;,
		DatabaseMetaData.typePredBasic 		=&gt; &quot;ALL EXCEPT WHERE .. LIKE&quot;,
		DatabaseMetaData.typeSearchable 	=&gt; &quot;YES&quot;
	}[intval]

end</body>
			<role>LIB_SCRIPT</role>
		</script>
	</scripts>
	<rubyVersion>RUBY_1_8</rubyVersion>
	<clearInputFields>N</clearInputFields>

	<outputFields>
		<outputField>
			<name>TYPE_NAME</name>
			<type>2</type>
			<update>N</update>
		</outputField>
		<outputField>
			<name>PRECISION</name>
			<type>5</type>
			<update>N</update>
		</outputField>
		<outputField>
			<name>LITERAL_PREFIX</name>
			<type>2</type>
			<update>N</update>
		</outputField>
		<outputField>
			<name>LITERAL_SUFFIX</name>
			<type>2</type>
			<update>N</update>
		</outputField>
		<outputField>
			<name>CREATE_PARAMS</name>
			<type>2</type>
			<update>N</update>
		</outputField>
		<outputField>
			<name>NULLABLE</name>
			<type>4</type>
			<update>N</update>
		</outputField>
		<outputField>
			<name>CASE_SENSITIVE</name>
			<type>4</type>
			<update>N</update>
		</outputField>
		<outputField>
			<name>SEARCHABLE</name>
			<type>2</type>
			<update>N</update>
		</outputField>
		<outputField>
			<name>IS_UNSIGNED</name>
			<type>4</type>
			<update>N</update>
		</outputField>
		<outputField>
			<name>AUTO_INCREMENT</name>
			<type>4</type>
			<update>N</update>
		</outputField>
	</outputFields>
	<rubyVariables>
	</rubyVariables>
	<infoSteps>
	</infoSteps>
	<targetSteps>
	</targetSteps>
	<gemHome/>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>178</xloc>
      <yloc>365</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>output critters</name>
    <type>Dummy</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>422</xloc>
      <yloc>154</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>output datatype info</name>
    <type>Dummy</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>429</xloc>
      <yloc>365</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>output function info</name>
    <type>Dummy</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>423</xloc>
      <yloc>267</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step_error_handling>
  </step_error_handling>
   <slave-step-copy-partition-distribution>
</slave-step-copy-partition-distribution>
   <slave_transformation>N</slave_transformation>
</transformation>
